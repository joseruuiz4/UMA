model CochesModel

enum TipoRevision { Mantenimiento, Reparacion }

-------------- Classes ------------------
class Clock
attributes
    now : Integer
operations
    tic()
        begin 
            Clock.allInstances()->asSequence()->first().now := Clock.allInstances()->asSequence()->first().now + 1;
        end
        pre diaDefinido : not Clock.allInstances()->asSequence()->first().now.oclIsUndefined()
        post diaSumado : Clock.allInstances()->asSequence()->first().now = Clock.allInstances()->asSequence()->first().now@pre + 1
end

class Ciudad
end

class Coche
attributes
    fechaMatriculacion : Integer
    -- kilometrosRecorridos: filtrar por viajes que hayan finalizado
    kilometrosRecorridos : Real --derive : HABRIA QUE QUITARLO PARA QUE LA OPERACION AVANZAR TENGA SENTIDO
        --self.viaje->select(v | not v.fechaLlegada.oclIsUndefined())->collect(v | v.km)->sum()
    kmViajeActual : Real --Para control de la operacion avanzar 
    garantia : Boolean  derive :
        let fechaActual : Integer = Clock.allInstances()->asSequence()->first().now in
        let antiguedadAnos : Integer = ((fechaActual - self.fechaMatriculacion) / 100).floor() in
        let ultimaRevision : Revision = self.revision -> select(r | r.taller.oclIsTypeOf(TallerOficial)) -> sortedBy(r | r.fechaFin) -> last() in
            antiguedadAnos < 4 or
            (not ultimaRevision.oclIsUndefined() and
                ultimaRevision.fechaFin + ultimaRevision.taller.oclAsType(TallerOficial).tiempoGarantia > fechaActual)

    mantenimiento : Boolean derive :
        let fechaActual : Integer = Clock.allInstances()->asSequence()->first().now in
        let antiguedadAnos : Integer = ((fechaActual - self.fechaMatriculacion) / 100).floor() in
        let ultimaRevisionMantenimiento : Revision = self.revision -> 
            select(r | r.tipo = #Mantenimiento) -> sortedBy(r | r.fechaFin) -> last() in
                antiguedadAnos > 4 and 
                    (not ultimaRevisionMantenimiento.oclIsUndefined() and ultimaRevisionMantenimiento.fechaFin + 100 <= fechaActual)

    velocidad : Real 
operations
    empezarViaje(CiudadDestino: Ciudad)
        begin
            declare nuevoViaje : Viaje;
            nuevoViaje := new Viaje;
            insert(self, nuevoViaje) into CocheViaje;
            insert(self.ciudad, nuevoViaje) into ViajeCiudadInicio;
            insert(CiudadDestino, nuevoViaje) into ViajeCiudadFin;
            nuevoViaje.km := InterCiudad.allInstances()->select(v | v.ciudadInicio = self.ciudad and v.ciudadFin = CiudadDestino)->collect(k | k.distanciaKm)->sum();
            nuevoViaje.fechaSalida := Clock.allInstances()->asSequence()->first().now;
            self.kmViajeActual := 0.0;
        end 
        --El coche tiene que estar en la ciudad de inicio y debe existir la clase InterCiudad entre esas ciudades
        pre existencia : not self.ciudad.oclIsUndefined() and InterCiudad.allInstances()->exists(r | r.ciudadInicio = self.ciudad and r.ciudadFin = CiudadDestino)
        --El viaje se ha creado con éxito
        post viajeCreado : Viaje.allInstances()->exists(r | r.ciudadInicioViaje = self.ciudad and r.ciudadFinViaje = CiudadDestino and r.coche = self)

    avanzar()
        begin 
            declare kmViaje : Real;
            kmViaje := Viaje.allInstances()->select(v | v.coche = self and v.fechaLlegada.oclIsUndefined() and v.ciudadInicioViaje = self.ciudad)->collect(k | k.km)->sum();
            --Si los km que quedan de viaje son menos que los de la velocidad dejamos el resultado como los km del viaje (los que se recorren en total)
            if ((self.kmViajeActual + self.velocidad) >= kmViaje) then 
                --Insert tiene que ir antes de la actualizacion de la fecha para poder buscar el viaje correctamente
                delete(self, self.ciudad) from CocheCiudad;
                insert(self, (Viaje.allInstances()->select(v | v.coche = self and v.fechaLlegada.oclIsUndefined())->sortedBy(f | f.fechaSalida)->first().ciudadFinViaje)) into CocheCiudad;
                --Sumamos a los km recorridos los que quedan para llegar al destino (Haciendolo asi te aseguras que si velocidad > kmRestantes no haga mas km de los reales)
                self.kilometrosRecorridos := self.kilometrosRecorridos + kmViaje - self.kmViajeActual;
                --Como ya hemos terminado el viaje, los km del viaje actual son los del viaje
                self.kmViajeActual := kmViaje;
                --Asignamos la fecha actual a la del viaje de llegada
                Viaje.allInstances()->select(v | v.coche = self and v.fechaLlegada.oclIsUndefined())->sortedBy(f | f.fechaSalida)->first().fechaLlegada := Clock.allInstances()->asSequence()->first().now;
            else 
                self.kilometrosRecorridos := self.kilometrosRecorridos + self.velocidad;
                self.kmViajeActual := self.kmViajeActual + self.velocidad;
            end
        end 
        --El coche debe de estar en un viaje que no ha terminado
        pre enViaje : Viaje.allInstances()->exists(r | r.coche = self and r.fechaLlegada.oclIsUndefined())
        --Los kilometros del coche se han actualizado
        post kmSumados : self.kilometrosRecorridos = self.kmViajeActual or self.kilometrosRecorridos > self.kmViajeActual or self.kilometrosRecorridos > self.kilometrosRecorridos@pre
end

class Taller
end

class TallerOficial < Taller
attributes
    tiempoGarantia : Integer
end

class Revision
attributes
    fechaInicio : Integer
    fechaFin : Integer
    tipo : TipoRevision
end

class Viaje
    attributes 
        fechaSalida : Integer
        fechaLlegada : Integer
        km : Real 
end

associationclass InterCiudad between
    Ciudad [0..*] role ciudadInicio
    Ciudad [0..*] role ciudadFin
attributes
    distanciaKm : Real
end

-------------- Associations ------------------
--esto no está claro
association CocheViaje between
    Coche [1..1] role coche
    Viaje [0..*] role viaje
end

association TallerCiudad between
    Taller [0..*] role taller
    Ciudad [1..1] role ciudad
end

association CocheCiudad between
    Coche [0..*] role coche
    Ciudad [0..1] role ciudad
end

association RevisionTaller between
    Revision [0..*] role revision
    Taller [1..1] role taller
end

--esto tampoco está claro
association RevisionCoche between
    Revision [0..*] role revision
    Coche [1..1] role coche
end

association ViajeCiudadInicio between 
    Ciudad[1] role ciudadInicioViaje
    Viaje[1] role viajeInicio
end

association ViajeCiudadFin between 
    Ciudad[1] role ciudadFinViaje
    Viaje[1] role viajeFin
end

-------------- Invariants ------------------
constraints


context InterCiudad
    -- Cada ciudad debe estar al menos a 5 kilómetros de distancia de otra
    inv distancia5Km : self.distanciaKm >= 5
    --La distancia tiene que ser la misma que la del viaje
    inv distEquivalente : Viaje.allInstances()->forAll(v | (v.ciudadInicioViaje = self.ciudadInicio and v.ciudadFinViaje = self.ciudadFin) implies v.km = self.distanciaKm)

context Revision 
    -- Todas las revisiones deben tener lugar después de que el coche se matriculase
    inv revisionPosteriorMatriculacion : self.fechaInicio > self.coche.fechaMatriculacion

    -- Si un coche está siendo sometido a una revisión, entonces el coche debe encontrarse en la misma ciudad donde está el taller.
    -- inv revisionMismaCiudad :
    --     self.revision -> forAll(r | r.fechaFin.oclIsUndefined() implies r.taller.ciudad = self.ciudad)
    inv RevisionEnProcesoCiudadTaller : 
        let fecha : Integer = Clock.allInstances()->asSequence()->first().now in
        (self.fechaInicio <= fecha and self.fechaFin >= fecha) implies
        self.coche.ciudad = self.taller.ciudad

context Coche    
    -- Como mucho, un coche se debe someter a una revisión, como máximo, en un momento dado
    inv UnaSolaRevisionAlaVez : self.revision->forAll(r1, r2 | 
        r1 = r2 or 
        (
            r1.fechaInicio < r2.fechaInicio and 
            r1.fechaFin < r2.fechaFin and
            r1.fechaFin < r2.fechaInicio
        )
        or
        (
            r1.fechaInicio > r2.fechaInicio and 
            r1.fechaFin > r2.fechaFin and
            r1.fechaFin > r2.fechaInicio
        )
    )

    -- Un coche se encontrará en todo momento bien realizando un viaje determinado o bien en una ciudad.
    inv CocheViajandoOEnCiudad : 
        if self.viaje ->notEmpty() then
            (self.viaje ->sortedBy(v | v.fechaSalida)->last().fechaLlegada.oclIsUndefined()) 
            implies self.ciudad.oclIsUndefined()
        else
            not self.ciudad.oclIsUndefined()
        endif

    -- Si el coche ha completado al menos un viaje y no se encuentra viajando, entonces debe encontrarse en la ciudad a la que llegó en su último viaje.
    inv CocheNoViajandoEstaEnCiudad :  
        (
            self.viaje->size() >= 1 and 
            not (self.viaje->sortedBy(v | v.fechaSalida)->last().fechaLlegada.oclIsUndefined())  
        )
        implies
        (
            self.ciudad = 
            self.viaje->sortedBy(v | v.fechaSalida)->last().ciudadFinViaje
        )

    -- Las ciudades origen y destino deben de ser coherentes
    inv CiudadesViajesCoherentes :
        let viajesOrdenados = self.viaje->sortedBy(v | v.fechaSalida) in
        viajesOrdenados->forAll(v | 
            let indice = viajesOrdenados->indexOf(v) in
            indice = viajesOrdenados->size() or --es el ultimo en la lista
            v.ciudadFinViaje = viajesOrdenados->at(indice + 1).ciudadInicioViaje
        )

    -- Los viajes de un coche no se pueden solapar
    inv noViajesSolapados :
        self.viaje -> forAll(v1, v2 | 
        v1 = v2 or 
        (
            v1.fechaSalida < v2.fechaSalida and 
            v1.fechaLlegada < v2.fechaLlegada and
            v1.fechaLlegada < v2.fechaSalida
        )
        or
        (
            v1.fechaSalida > v2.fechaSalida and 
            v1.fechaLlegada > v2.fechaLlegada and
            v1.fechaLlegada > v2.fechaSalida
        )
    )

context Ciudad
    -- Cada taller se sitúa en una ciudad, y en cada ciudad habrá, a lo sumo, un taller oficial, pudiendo haber varios talleres no oficiales.
    inv Solo1TallerOficialPorCiudad: self.taller->select(t | t.oclIsTypeOf(TallerOficial))->size() <= 1

context Viaje 
    --Si un viaje tiene fecha de llegada, tambien tiene fecha de inicio
    inv fechasCompletasViajeTerminado : not self.fechaLlegada.oclIsUndefined() implies not self.fechaSalida.oclIsUndefined()
    --La fecha de llegada es posterior a la fecha de inicio
    inv fechaLLegadaMayorFechaSalida : not self.fechaLlegada.oclIsUndefined() implies self.fechaLlegada > self.fechaSalida
    -- Si el viaje está en curso (sin fecha de llegada), entonces tiene una fecha de salida
    inv viajeEnCurso : self.fechaLlegada.oclIsUndefined() implies not self.fechaSalida.oclIsUndefined()