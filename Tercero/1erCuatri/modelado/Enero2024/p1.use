model Coches

enum TipoRevision{Reparacion, Mantenimiento}

class Clock
    attributes
        now : Integer init : 0
    operations
        tick()
        begin
            self.now := self.now + 1;
            for o in self.activeObject do 
                o.tick();
        end
        end
        post TimeFiles : now = now@pre + 1

        run(n : Integer)
        begin
            for i in Sequence{1..n} do  
                self.tick();
        end
        end
        pre NoTimeTravels : n>0
        post TimeFiles : now = now@pre + n
end

abstract class ActiveObject
operations
    tick()
    begin 
    end
end

aggregation Time between
    Clock[1]role clock
    ActiveObject[*] role activeObject ordered
end

class Coche < ActiveObject
    attributes
        fechaMatriculacion : Integer
        kms : Integer derive : 
            self.viaje->select(v|v.fechaLlegada <> null) -> collect(v|v.viajeCoche.distancia)->sum()
        enGarantia : Boolean derive : 
            let ultimaRevision = self.revision->select(r|r.taller.oclIsTypeOf(TallerOficial))->sortedBy(fechaFin)->last()  in
            if Clock.allInstances->any(true).now - self.fechaMatriculacion < 400 
            then true
            else if  ultimaRevision <> null and Clock.allInstances->any(true).now - ultimaRevision.fechaFin < ultimaRevision.taller.oclAsType(TallerOficial).garantia
            then true
            else false
            endif
            endif
             
              
    
            
        necesitaMantenimiento : Boolean derive : 
            let ultimaRevision = self.revision->sortedBy(fechaFin)->last()  in


            if Clock.allInstances->any(true).now - self.fechaMatriculacion > 400 then true
            else if ultimaRevision <> null and Clock.allInstances->any(true).now - ultimaRevision.fechaFin > 100 then true
            else false
            endif 
            endif
        velocidad : Integer
    operations
        iniciarViaje(d : DistanciaCiudad)
        begin
            declare v : Viaje;
            v := new Viaje() between (self, d);
            v.fechaSalida := Clock.allInstances()->any(true).now;
            delete(self, d.ciudad1)from CocheCiuadad;
        end
        pre EstaEnCiudad1 : self.ciudad = d.ciudad1
        pre Dexiste : d <> null and d.ciudad1 <> null and d.ciudad2 <> null
        post YaNoEstaEnCiudad : self.ciudad = null
        post UnViajeMas : self.viaje->size() = self.viaje@pre->size() + 1

        avanzar()
        begin 
            declare v : Viaje, c : Clock; 
            c := Clock.allInstances()->any(true);
            v := self.viaje->select(v|v.fechaLlegada = null)->any(true);
            if v.kms + v.coche.velocidad < v.viajeCoche.distancia then
                v.kms := v.kms + v.coche.velocidad
            else 
                v.kms := v.viajeCoche.distancia;
                v.fechaLlegada := c.now;
                insert(v.coche, v.viajeCoche.ciudad2)into CocheCiuadad;
            end
        end
        pre NoEstaEnCiudad : self.ciudad = null --Si no esta en ninguna ciudad esta viajando
        post HaAvanzado : self.viaje->collect(kms)->sum() > self.viaje@pre->collect(kms@pre)->sum()

        tick()
        begin
            if self.ciudad = null then self.avanzar();
            end
        end
        


end

class Ciudad
end


class Taller
end

class TallerOficial < Taller    
    attributes
        garantia : Integer
end

class Revision
    attributes
        fechaInicio : Integer
        fechaFin : Integer
        tipoRevision : TipoRevision

end


association TallerRevision between
    Taller[1]role taller 
    Revision[*]role revision
end

association CocheRevision between
    Coche[1]role coche  
    Revision[*]role revision
end

associationclass DistanciaCiudad between
    Ciudad[*]role ciudad1
    Ciudad[*]role ciudad2
    attributes 
        distancia : Integer
end

associationclass Viaje between  
    Coche[*]role coche
    DistanciaCiudad[*]role viajeCoche
    attributes
        fechaSalida : Integer
        fechaLlegada : Integer
        kms : Integer
end

association TallerCiudad between
    Taller[*]role taller    
    Ciudad[1]role ciudad
end

association CocheCiuadad between
    Coche[*]role coche
    Ciudad[0..1]role ciudad
end

constraints 
    context DistanciaCiudad 
        inv DistanciaMayor5 : 
            self.distancia > 5 --REQ 1
        inv CiudadesDist : 
            self.ciudad1 <> self.ciudad2

    context Revision
        inv DespuesDeMatriculacion : 
            self.fechaInicio > self.coche.fechaMatriculacion
    context Ciudad 
        inv Solo1TallerOficial : 
            self.taller->select(t|t.oclIsTypeOf(TallerOficial))->size()<= 1
    
    context Coche  
        inv Solo1Revision : 
            self.revision->forAll(r1, r2| r1<>r2 implies not (r2.fechaInicio > r1.fechaInicio and r2.fechaInicio < r1.fechaFin))
        inv MismaCiudadQueTaller : --REQ 7
            let dia : Integer = Clock.allInstances()->any(true).now in
            let revisionActual : Revision =self.revision->select(r|r.fechaInicio < dia and r.fechaFin > dia)->any(true) in
            revisionActual <> null implies self.ciudad = revisionActual.taller.ciudad
        inv Solo1ViajeSinFechaLlegada : 
            self.viaje->forAll(v|v.fechaSalida <> null) and self.viaje->select(v|v.fechaLlegada = null)->size() <= 1
        inv OEnViajeOEnCiudad : 
            if self.viaje->select(v|v.fechaLlegada = null)->size() = 1 then 
                self.ciudad->size() = 0 
            else 
                self.ciudad->size() = 1 
            endif
        inv EnUltimaCiudadDeViaje : --REQ 10
            let fechaMaximaLlegada : Integer = self.viaje->collect(v|v.fechaLlegada)->max() in
            let ciudadFin : Ciudad = self.viaje->select(v|v.fechaLlegada = fechaMaximaLlegada)->any(true).viajeCoche.ciudad2 in
            (self.viaje->size() >= 1 and self.viaje->select(v|v.fechaLlegada = null)->size() = 0) implies self.ciudad = ciudadFin
            
        inv ViajesNoSolapados : --REQ 11
            self.viaje->forAll(v1, v2| v1<>v2 implies (v2.fechaSalida <> v1.fechaSalida and (v2.fechaSalida >= v1.fechaLlegada or v1.fechaSalida >= v2.fechaLlegada)))
            
        inv ViajesCoherentes : --REQ 12
            let viajesOrdenados = self.viaje->sortedBy(v|v.fechaLlegada) in 
                viajesOrdenados->forAll(v|
                let indice = viajesOrdenados->indexOf(v) in
                indice = viajesOrdenados->size() or v.viajeCoche.ciudad2 = viajesOrdenados->at(indice + 1).viajeCoche.ciudad1
                )

        inv KmsEsSumaViajes : 
            self.kms = self.viaje->select(v|v.fechaLlegada <> null) -> collect(v|v.viajeCoche.distancia)->sum()
        
    